name: "Base_workflow"

on:
  workflow_call:
    inputs:
      checkout_repository:
        description: "Repository to checkout"
        required: false
        type: string
        default: ${{ github.repository }}
      checkout_commit_sha:
        description: "The branch, tag or SHA to checkout"
        required: false
        type: string
        default: ""
      checkout_fetch_depth:
        description: "Number of commits to fetch"
        required: false
        type: string
        default: "1"
      checkout_ci:
        description: "The CI system name, could be github or gitlab"
        required: false
        type: string
        default: "github"
      aws_region:
        required: true
        type: string
      aws_role_arn:
        required: true
        type: string
      aws_default_region:
        required: true
        type: string
      aws_role_duration:
        default: "1200"
        type: string
      aws_mask_account_id:
        default: "no"
        type: string
      working_directory:
        required: true
        type: string
      tf_version:
        default: "v1.4.5"
        type: string
      tf_apply:
        default: "false"
        type: string
      tf_dont_fail_if_plan_not_empty:
        default: "false"
        type: string
      tf_get_plan_exit_code:
        default: "false"
        type: string
      tf_additional_env_vars:
        default: null
        type: string
      tf_recreate_missing_lambda_package:
        default: "false"
        type: string
      tf_upload_artifact_name_suffix:
        default: ""
        type: string
      tf_upload_artifact_plan:
        default: "false"
        type: string
      tf_upload_artifact_state_file:
        default: "false"
        type: string
      tf_state_file_dir_on_s3:
        default: ""
        type: string
      tf_state_file_name:
        default: ""
        type: string
      tf_sh_version:
        default: "0.2.0"
        type: string
      environment:
        description: "Environment name for the deployment"
        required: false
        type: string
        default: ""
    secrets:
      slack_webhook_url:
        required: false
    outputs:
      tf_output:
        description: "The output of the tf output -json command"
        value: ${{ jobs.terraform.outputs.tf_output }}
      tf_plan_exit_code:
        description: "The exit code of the terraform plan command"
        value: ${{ jobs.terraform.outputs.tf_plan_exit_code }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
      AWS_ROLE_ARN: ${{ inputs.aws_role_arn }}
      SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}
    permissions:
      id-token: write
      contents: write
    outputs:
      tf_output: ${{ steps.apply.outputs.tf_output }}
      tf_plan_exit_code: ${{ steps.plan.outputs.tf_plan_exit_code }}

    steps:
      # Validate checkout_ci input
      - name: Validate checkout_ci input
        if: ${{ inputs.checkout_ci != 'github' && inputs.checkout_ci != 'gitlab' }}
        run: |
          echo "Error: checkout_ci must be either 'github' or 'gitlab', but got '${{ inputs.checkout_ci }}'"
          exit 1

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout Github
        if: ${{ inputs.checkout_ci == 'github' }}
        uses: actions/checkout@v4.1.1
        with:
          repository: ${{ inputs.checkout_repository }}
          ref: ${{ inputs.checkout_commit_sha }}
          fetch-depth: ${{ inputs.checkout_fetch_depth }}

      - name: Checkout Gitlab
        if: ${{ inputs.checkout_ci == 'gitlab' }}
        run: |
          git clone https://gitlab.com/${{ inputs.checkout_repository }}.git
          repo_name=${{ inputs.checkout_repository }}
          repo_name=${repo_name#*/}
          cd $repo_name
          git checkout ${{ inputs.checkout_commit_sha }}
          git fetch --depth ${{ inputs.checkout_fetch_depth }}

      # Configure AWS
      - name: Configure AWS credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
          role-duration-seconds: ${{ inputs.aws_role_duration }}
          role-session-name: ${{ github.event.repository.name }}
          mask-aws-account-id: ${{ inputs.aws_mask_account_id }}

      # Install terraform
      - name: setup terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Download tf.sh
        working-directory: ${{ inputs.working_directory }}
        run: curl https://releases.fivexl.io/tf/v${{ inputs.tf_sh_version }}/tf.sh --output tf.sh && chmod +x ./tf.sh

      # Initialize
      - name: terraform init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init -backend=false

      # Validate
      - name: terraform validate
        working-directory: ${{ inputs.working_directory }}
        run: terraform validate -no-color

      # Check terraform specs format
      - name: terraform fmt
        working-directory: ${{ inputs.working_directory }}
        run: terraform fmt --recursive -check=true

      # Run terraform plan
      - id: plan
        name: terraform plan
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_RECREATE_MISSING_LAMBDA_PACKAGE: ${{ inputs.tf_recreate_missing_lambda_package }}
          TF_DATA_DIR: ./.terraform.${{ steps.configure-aws-creds.outputs.aws-account-id }}-${{ inputs.aws_region }}
        run: |
          #Set up additional env vars if there are any
          env_vars='${{ inputs.tf_additional_env_vars }}'
          if [[ -n "${env_vars}" ]]; then
            eval "$(echo "$env_vars" | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')"
          fi
          #Prepare tfplan file if tf_apply=true or if we just need to get the plan, else just check the configuration 
          #drift and fail pipeline if there are any changes 
          if ${{ inputs.tf_apply }} || ${{ inputs.tf_dont_fail_if_plan_not_empty }}; then
            ./tf.sh plan -no-color -out plan.tfplan
            # prepare also human-readable plan
            terraform show -no-color plan.tfplan > tfplan
          else
            set +e
            # Run plan and capture both output and exit code
            PLAN_OUTPUT=$(./tf.sh plan -detailed-exitcode -no-color -out plan.tfplan 2>&1)
            PLAN_EXIT_CODE=$?
            set -e

            # Show the plan output
            echo "$PLAN_OUTPUT"

            # If plan shows changes and Slack webhook is provided, send notification
            if [ $PLAN_EXIT_CODE -eq 2 ] && [ -n "$SLACK_WEBHOOK_URL" ]; then
              echo "Sending Slack notification for non-empty plan..."
              # Prepare message with conditional environment line
              MESSAGE="🚨"
              if [ -n "${{ inputs.environment }}" ]; then
                MESSAGE="$MESSAGE *Environment: ${{ inputs.environment }}*\n"
              fi
              MESSAGE="$MESSAGE Terraform plan shows changes in ${{ github.repository }} (${{ github.ref_name }}):\nSee the changes here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              
              SLACK_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"$MESSAGE\"}" \
                "$SLACK_WEBHOOK_URL")
              SLACK_STATUS=$(echo "$SLACK_RESPONSE" | tail -n1)
              SLACK_BODY=$(echo "$SLACK_RESPONSE" | sed '$d')
              
              if [ "$SLACK_STATUS" = "200" ]; then
                echo "✅ Slack notification sent successfully"
              else
                echo "❌ Failed to send Slack notification. Status: $SLACK_STATUS"
                echo "Response: $SLACK_BODY"
              fi
            fi
            

            if ${{ inputs.tf_get_plan_exit_code }}; then
              # Save human-readable plan so we can upload it to artifacts
              terraform show -no-color plan.tfplan > tfplan
              # Put the plan exit code in the output
              echo "tf_plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
            else
              # Exit with the original plan exit code
              exit $PLAN_EXIT_CODE
            fi
          fi

      # Apply, prepare output
      - id: apply
        name: terraform apply
        if: ${{ inputs.tf_apply == 'true' }}
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_AUTO_APPLY_SAVED_PLAN: true
          TF_SKIP_BACKEND_INIT: true
          TF_DATA_DIR: ./.terraform.${{ steps.configure-aws-creds.outputs.aws-account-id }}-${{ inputs.aws_region }}
        run: |
          #Set up additional env vars if there are any
          env_vars='${{ inputs.tf_additional_env_vars }}'
          if [[ -n "${env_vars}" ]]; then
            eval "$(echo "$env_vars" | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')"
          fi
          ./tf.sh apply plan.tfplan
          echo "tf_output=$(terraform output -json | jq -c)" >> $GITHUB_OUTPUT

      - name: set up aws cli
        if: ${{ inputs.tf_upload_artifact_state_file == 'true' }}
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          arch: amd64

      - name: download state file from s3
        if: ${{ inputs.tf_upload_artifact_state_file == 'true' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          aws_environment_id=$(echo -n "${{ steps.configure-aws-creds.outputs.aws-account-id }}-${{ inputs.aws_region }}" | sha1sum | awk '{print $1}')
          aws s3 cp s3://terraform-state-${aws_environment_id}/${{ inputs.tf_state_file_dir_on_s3 }}/${{ inputs.tf_state_file_name }} ./${{ inputs.tf_state_file_name }}

      - name: upload state file to artifacts
        if: ${{ inputs.tf_upload_artifact_state_file == 'true' }}
        uses: actions/upload-artifact@v4.3.1
        with:
          name: tf_artifacts_state_file${{ inputs.tf_upload_artifact_name_suffix }}
          path: ${{ inputs.working_directory }}/${{ inputs.tf_state_file_name }}

      - name: upload plan to artifacts
        if: ${{ inputs.tf_upload_artifact_plan == 'true' }}
        uses: actions/upload-artifact@v4.3.1
        with:
          name: tf_artifacts_plan${{ inputs.tf_upload_artifact_name_suffix }}
          path: ${{ inputs.working_directory }}/tfplan
