name: "Base_workflow"

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      aws_role_arn:
        required: true
        type: string
      aws_default_region:
        required: true
        type: string
      aws_role_duration:
        default: '1200'
        type: string
      aws_mask_account_id:
        default: 'no'
        type: string
      working_directory:
        required: true
        type: string
      tf_version:
        default: 'v1.4.5'
        type: string
      tf_apply:
        default: 'false'
        type: string
      tf_additional_env_vars:
        default: null
        type: string

jobs:
  terraform:
    runs-on: ubuntu-20.04
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
      AWS_ROLE_ARN: ${{ inputs.aws_role_arn }}
    permissions:
      id-token: write
      contents: write


    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 1

      # Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
          role-duration-seconds: ${{ inputs.aws_role_duration }}
          role-session-name: ${{ github.event.repository.name }}
          mask-aws-account-id: ${{ inputs.aws_mask_account_id }}

      # Install terraform
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Download tf.sh
        working-directory: ${{ inputs.working_directory }}
        run: curl https://releases.fivexl.io/tf/v0.2.0/tf.sh --output tf.sh && chmod +x ./tf.sh

      # Initialize
      - name: terraform init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init -backend=false

      # Validate
      - name: terraform validate
        working-directory: ${{ inputs.working_directory }}
        run: terraform validate -no-color

      # Check terraform specs format
      - name: terraform fmt
        working-directory: ${{ inputs.working_directory }}
        run: terraform fmt --recursive -check=true

      # Run terraform plan
      - name: terraform plan
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_RECREATE_MISSING_LAMBDA_PACKAGE: false
        run: |
          #Set up additional env vars
          if [[ -n "${{ inputs.tf_additional_env_vars }}" ]]; then
            eval "$(echo ${{ inputs.tf_additional_env_vars }} | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')"
          fi
          #Apply changes only if tf_apply=true, else just check the configuration drift 
          if ${{ inputs.tf_apply }}; then
            ./tf.sh plan -no-color -out plan.tfplan
          else
            ./tf.sh plan -detailed-exitcode
          fi

      # Apply
      - name: terraform apply
        if: ${{ inputs.tf_apply == 'true' }}
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_AUTO_APPLY_SAVED_PLAN: true
          TF_SKIP_BACKEND_INIT: true
        run: ./tf.sh apply plan.tfplan
