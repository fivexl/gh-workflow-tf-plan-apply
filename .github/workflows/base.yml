name: "Base_workflow"

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      aws_role_arn:
        required: true
        type: string
      aws_default_region:
        required: true
        type: string
      aws_role_duration:
        default: '1200'
        type: string
      aws_mask_account_id:
        default: 'no'
        type: string
      working_directory:
        required: true
        type: string
      tf_version:
        default: 'v1.4.5'
        type: string
      tf_apply:
        default: 'false'
        type: string
      tf_dont_fail_if_plan_not_empty:
        default: 'false'
        type: string
      tf_additional_env_vars:
        default: null
        type: string
      tf_recreate_missing_lambda_package:
        default: 'false'
        type: string
      tf_upload_artifacts:
        default: 'false'
        type: string
      tf_upload_artifact_state_file:
        default: 'false'
        type: string
      tf_upload_artifact_name_suffix:
        default: ''
        type: string
      tf_upload_artifact_path:
        default: ''
        type: string
      tf_sh_version:
        default: '0.2.0'
        type: string
    outputs:
      tf_output:
        description: "The output of the tf output -json command"
        value: ${{ jobs.terraform.outputs.tf_output }}

jobs:
  terraform:
    runs-on: ubuntu-20.04
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
      AWS_ROLE_ARN: ${{ inputs.aws_role_arn }}
    permissions:
      id-token: write
      contents: write
    outputs:
      tf_output: ${{ steps.apply.outputs.tf_output }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 1

      # Configure AWS
      - name: Configure AWS credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
          role-duration-seconds: ${{ inputs.aws_role_duration }}
          role-session-name: ${{ github.event.repository.name }}
          mask-aws-account-id: ${{ inputs.aws_mask_account_id }}

      # Install terraform
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Download tf.sh
        working-directory: ${{ inputs.working_directory }}
        run: curl https://releases.fivexl.io/tf/v${{ inputs.tf_sh_version }}/tf.sh --output tf.sh && chmod +x ./tf.sh

      # Initialize
      - name: terraform init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init -backend=false

      # Validate
      - name: terraform validate
        working-directory: ${{ inputs.working_directory }}
        run: terraform validate -no-color

      # Check terraform specs format
      - name: terraform fmt
        working-directory: ${{ inputs.working_directory }}
        run: terraform fmt --recursive -check=true

      # Run terraform plan
      - name: terraform plan
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_RECREATE_MISSING_LAMBDA_PACKAGE: ${{ inputs.tf_recreate_missing_lambda_package }}
        run: |
          #Set up additional env vars if there are any
          env_vars='${{ inputs.tf_additional_env_vars }}'
          if [[ -n "${env_vars}" ]]; then
            eval "$(echo "$env_vars" | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')"
          fi
          #Prepare tfplan file if tf_apply=true or if we just need to get the plan, else just check the configuration 
          #drift and fail pipeline if there are any changes 
          if ${{ inputs.tf_apply }} || ${{ inputs.tf_dont_fail_if_plan_not_empty }}; then
            ./tf.sh plan -no-color -out plan.tfplan
          else
            ./tf.sh plan -detailed-exitcode
          fi

      # Apply, prepare output
      - id: apply
        name: terraform apply
        if: ${{ inputs.tf_apply == 'true' }}
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_AUTO_APPLY_SAVED_PLAN: true
          TF_SKIP_BACKEND_INIT: true
          TF_DATA_DIR: ./.terraform.${{ steps.configure-aws-creds.outputs.aws-account-id }}-${{ inputs.aws_region }}
        run: |
          #Set up additional env vars if there are any
          env_vars='${{ inputs.tf_additional_env_vars }}'
          if [[ -n "${env_vars}" ]]; then
            eval "$(echo "$env_vars" | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')"
          fi
          ./tf.sh apply plan.tfplan
          echo "tf_output=$(terraform output -json | jq -c)" >> $GITHUB_OUTPUT
      
      - name: set up aws cli
        if: ${{ inputs.tf_upload_artifact_state_file == 'true' }}
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          arch: amd64    

      - name: download state file from s3
        if: ${{ inputs.tf_upload_artifact_state_file == 'true' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          aws_environment_id=$(echo -n "${{ steps.configure-aws-creds.outputs.aws-account-id }}-${{ inputs.aws_region }}" | sha1sum | awk '{print $1}')
          aws s3 cp s3://terraform-state-${aws_environment_id}/terraform/terraform-server/main.tfstate ./main.tfstate

      - name: upload state file to artifacts
        if: ${{ inputs.tf_upload_artifact_state_file == 'true' }}
        uses: actions/upload-artifact@v4.0.0
        with:
          name: tf_artifacts_state_file${{ inputs.tf_upload_artifact_name_suffix }}
          path: ./main.tfstate

      - name: upload artifacts
        if: ${{ inputs.tf_upload_artifacts == 'true' }}
        env:
          ARTIFACT_PATH: ${{ inputs.tf_upload_artifact_path || inputs.working_directory }}
        uses: actions/upload-artifact@v4.0.0
        with:
          name: tf_artifacts${{ inputs.tf_upload_artifact_name_suffix }}
          path: ${{ env.ARTIFACT_PATH }}
